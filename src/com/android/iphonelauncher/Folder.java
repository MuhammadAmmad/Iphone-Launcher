/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/*
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.iphonelauncher;

import com.android.ui.CellLayoutConfig;
import com.android.ui.IphoneShortcutCallback;
import com.android.util.AnimManager;
import com.android.util.Common;


import android.app.WallpaperManager;
import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.Handler;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.AlphaAnimation;
import android.view.animation.LinearInterpolator;
import android.view.animation.TranslateAnimation;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import java.util.ArrayList;

/**
 * Represents a set of icons chosen by the user or generated by the system.
 */
public class Folder extends RelativeLayout implements OnClickListener, View.OnLongClickListener,
        TextWatcher {

    private static final String TAG = "Folder";

    // protected AbsListView mContent;
    protected DragController mDragController;

    protected Launcher mLauncher;

    // protected Button mCloseButton;

    protected FolderInfo mInfo;

    /**
     * Which item is being dragged
     */
    protected ShortcutInfo mDragItem;

    protected Workspace mFolderWorkspace;

    // protected AnimManager mAnimManager;

    protected View mFolderIcon;

    protected EditText mFolderEditText;

    protected ImageView mCloseView;

    protected LinearLayout mFolderContainer;

    private static final int TOPMASK_ID = 25;

    private static final int BOTTOMMASK_ID = 26;

    private int mWorkspceType;

    private ImageView mTopMaskView;

    private ImageView mBottomMaskView;

    // private Paint mLinePaint;

    private TextView mFolderLable;

    private LinearLayout mFolderEditContainer;

    // private static final int CORNER_W = 10;
    //
    // private static final int CORNER_H = 15;

    // private int MIN_TOP_OFFSET;

    private int mTopMaskHeight;

    private int mFolderContainerHeight;

    private int mBottomMaskHeight;

    private Bitmap mTopMaskBitmap;

    private Bitmap mBottomMaskBitmap;

    private Bitmap mFolderContourBitmap;

    private boolean mPortrait;

    private static final int[] FOLDER_BGS = {
            R.drawable.folder_bg_1, R.drawable.folder_bg_2
            , R.drawable.folder_bg_3, R.drawable.folder_bg_4
    };

    /**
     * Used to inflate the Workspace from XML.
     * 
     * @param context The application's context.
     * @param attrs The attribtues set containing the Workspace's customization
     *            values.
     */
    public Folder(Context context, AttributeSet attrs) {
        super(context, attrs);
        setAlwaysDrawnWithCacheEnabled(false);
        // setBackgroundResource(R.drawable.folder_bg);
        // setOnClickListener(this);
        // mAnimManager = new AnimManager();

        // mLinePaint = new Paint();
        // mLinePaint.setColor(Color.GRAY);
        // mLinePaint.setAntiAlias(true);
        // mLinePaint.setStyle(Style.STROKE);
        // mLinePaint.setStrokeWidth(3.0f);

        // MIN_TOP_OFFSET =
        // getResources().getDimensionPixelSize(R.dimen.workspace_cell_height);
        mPortrait = context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT;
    }

    @Override
    protected void onFinishInflate() {
        super.onFinishInflate();
        mFolderEditText = (EditText) findViewById(R.id.folder_name);
        mFolderEditText.addTextChangedListener(this);
        mCloseView = (ImageView) findViewById(R.id.folder_close);
        mCloseView.setOnClickListener(this);
        mFolderEditContainer = (LinearLayout) findViewById(R.id.folder_edit_container);
        mFolderLable = (TextView) findViewById(R.id.folder_label);
        mFolderContainer = (LinearLayout) findViewById(R.id.folder_container);

        mFolderWorkspace = (Workspace) findViewById(R.id.folder_workspace);
        mFolderWorkspace.setHapticFeedbackEnabled(false);
        mFolderWorkspace.setOnLongClickListener(this);

        if (AnimManager.getInstance().isAnim()) {
            mFolderLable.setVisibility(View.INVISIBLE);
            mFolderEditContainer.setVisibility(View.VISIBLE);
        }
    }

    public void onItemClick(AdapterView parent, View v, int position, long id) {
        ShortcutInfo app = (ShortcutInfo) parent.getItemAtPosition(position);
        int[] pos = new int[2];
        v.getLocationOnScreen(pos);
        app.intent.setSourceBounds(new Rect(pos[0], pos[1], pos[0] + v.getWidth(), pos[1]
                + v.getHeight()));
        mLauncher.startActivitySafely(app.intent, app);
    }

    public void onClick(View v) {
        if (v == mCloseView) {
            mFolderEditText.getEditableText().clear();
            mCloseView.setVisibility(View.GONE);
        } else {
            mDragItem = null;
            animationClose();
        }
    }

    public boolean onLongClick(View v) {
        if (v instanceof BubbleTextView || v instanceof IphoneInstallAppShortCut) {
            startDrag(v);
        }
        return true;
    }

    // public boolean onItemLongClick(AdapterView<?> parent, View view, int
    // position, long id) {
    // if (!view.isInTouchMode()) {
    // return false;
    // }
    //
    // ShortcutInfo app = (ShortcutInfo) parent.getItemAtPosition(position);
    //
    // mDragController.startDrag(view, this, app,
    // DragController.DRAG_ACTION_COPY);
    // mLauncher.closeFolder(this);
    // mDragItem = app;
    //
    // return true;
    // }

    public void setDragController(DragController dragController) {
        mDragController = dragController;
        mFolderWorkspace.setDragController(mDragController);
        mDragController.addDropTarget(mFolderWorkspace);
    }

    public void onDropCompleted(View target, boolean success) {
    }

    /**
     * Sets the adapter used to populate the content area. The adapter must only
     * contains ShortcutInfo items.
     * 
     * @param adapter The list of applications to display in the folder.
     */
    void setContentAdapter(BaseAdapter adapter) {
        // mContent.setAdapter(adapter);
    }

    void notifyDataSetChanged() {
        // ((BaseAdapter) mContent.getAdapter()).notifyDataSetChanged();
    }

    void setLauncher(Launcher launcher) {
        mLauncher = launcher;
        mFolderWorkspace.setLauncher(mLauncher);
    }

    /**
     * @return the FolderInfo object associated with this folder
     */
    FolderInfo getInfo() {
        return mInfo;
    }

    // When the folder opens, we need to refresh the GridView's selection by
    // forcing a layout
    void onOpen() {
        mFolderWorkspace.requestLayout();
        mInfo.opened = true;
    }

    void onClose() {
        mInfo.opened = false;
//Log.w(Launcher.TAG, "Folder::onClose()=====");
        // to hide softkeybroad
        InputMethodManager imm = (InputMethodManager) getContext().getSystemService(
                Context.INPUT_METHOD_SERVICE);
        if (imm != null) {
            imm.hideSoftInputFromWindow(getWindowToken(), 0);
        }

        // final Workspace workspace = mLauncher.getWorkspace();
        // mLauncher.getWorkspace().getChildAt(mLauncher.getWorkspace().getCurrentScreen())
        // .requestFocus();
        // mAnimManager.stop();

        // clear all target
        final CellLayout folderCellLayout = (CellLayout) mFolderWorkspace.getChildAt(0);
        final int N = folderCellLayout.getChildCount();
        for (int i = 0; i < N; i++) {
            final View view = folderCellLayout.getChildAt(i);
            if (view != null) {
                view.clearAnimation();
                AnimManager.getInstance().removeControllers(view);
                mDragController.removeDropTarget((DropTarget) view);
            }
        }
        mDragController.removeDropTarget(mFolderWorkspace);

        // need to procee if item's num is 1;
        //final ArrayList<AppShortcutInfo> apps = ((UserFolderInfo) mInfo).contents;
        //
        if (mDragItem != null) {
        	((UserFolderInfo) mInfo).remove(mDragItem);
            mDragItem = null;
        }
        if (((UserFolderInfo) mInfo).size() < 1) {
            if (mFolderIcon != null) {
                //final AppShortcutInfo info = (AppShortcutInfo)apps.get(0);
                final CellLayout layout = (CellLayout) mFolderIcon.getParent();
                final Workspace workspace = (Workspace) layout.getParent();

                final int cellX = mInfo.cellX;
                final int cellY = mInfo.cellY;
                final long container = mInfo.container;
                final int screen = mInfo.screen;
                // switch (workspace.getType()) {
                // case Workspace.WORKSPACE_NAVIGATEBAR:
                // container = LauncherSettings.Favorites.CONTAINER_NAVIGATEBAR;
                // break;
                // case Workspace.WORKSPACE_WORKSPACE:
                // container = LauncherSettings.Favorites.CONTAINER_DESKTOP;
                // break;
                // default:
                // return;
                // }

                // remove folder icon
                ((IphoneShortcutCallback) mFolderIcon).removeSelfInParent(mDragController);

                // delete from db
                LauncherModel.deleteItemFromDatabase(getContext(), mInfo);

                // add a new shortcut in cell
                // int[] vacant = new int[2];
                // if (layout.getVacantCell(vacant, 1, 1)) {
//                View shortcut = mLauncher.createIphoneShortcut(info);
//                workspace.addInScreen(shortcut, layout, cellX, cellY, 1, 1, false);
//                LauncherModel.moveItemInDatabase(getContext(), info, container, screen, cellX,
//                        cellY);
//
//                AnimManager.getInstance().startSingle(shortcut);
                // }
            }
        } else {
            // set the new title
            final String title = mFolderEditText.getText().toString();
            if (title != null && title.length() > 0) {
                mInfo.title = title;
                ((TextView) mFolderIcon).setText(mInfo.title);
                LauncherModel.updateItemInDatabase(getContext(), mInfo);
            }
            ((FolderIcon) mFolderIcon).resetDrawableIcon();
        }

        // release the bitmpas
        recycle();
    }

    void bind(FolderInfo info, View folderIcon) {
        mInfo = info;
        mFolderIcon = folderIcon;
        mFolderEditText.setText(info.title);
        mFolderLable.setText(info.title);
        Workspace workspace = (Workspace) mFolderIcon.getParent().getParent();
        mWorkspceType = workspace.getType();

        initMask();

        initCell(((UserFolderInfo) info).contents);

        if (mWorkspceType == Workspace.WORKSPACE_WORKSPACE) {
            final DisplayMetrics dm = getResources().getDisplayMetrics();
            Rect frame = new Rect();
            mLauncher.getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);
            int statusBarHeight = frame.top;
            int topOffset = 0;
            if (mTopMaskHeight + mFolderContainerHeight > (dm.heightPixels - statusBarHeight)) {
                topOffset = (int) (mTopMaskHeight + mFolderContainerHeight - (dm.heightPixels - statusBarHeight));
            }
            RelativeLayout.LayoutParams lp = (LayoutParams) mTopMaskView.getLayoutParams();
            lp.addRule(RelativeLayout.ALIGN_PARENT_TOP);
            lp.topMargin = -topOffset;
            mTopMaskView.setLayoutParams(lp);
            if (topOffset > 0) {
                TranslateAnimation topTranslateAnimation = new TranslateAnimation(0, 0, topOffset,
                        0);
                topTranslateAnimation.setInterpolator(new LinearInterpolator());
                topTranslateAnimation.setRepeatCount(0);
                topTranslateAnimation.setDuration(200);
                mTopMaskView.startAnimation(topTranslateAnimation);
            }

            lp = (LayoutParams) mFolderContainer.getLayoutParams();
            lp.addRule(RelativeLayout.BELOW, TOPMASK_ID);
            // lp.topMargin = -CORNER_H;
            mFolderContainer.setLayoutParams(lp);

            lp = (LayoutParams) mBottomMaskView.getLayoutParams();
            lp.addRule(RelativeLayout.BELOW, R.id.folder_container);
            mBottomMaskView.setLayoutParams(lp);

            TranslateAnimation bottomTranslateAnimation = new TranslateAnimation(0, 0,
                    -mFolderContainerHeight, 0);
            bottomTranslateAnimation.setInterpolator(new LinearInterpolator());
            bottomTranslateAnimation.setRepeatCount(0);
            bottomTranslateAnimation.setDuration(200);
            mBottomMaskView.startAnimation(bottomTranslateAnimation);

        } else if (mWorkspceType == Workspace.WORKSPACE_NAVIGATEBAR) {
            final DisplayMetrics dm = getResources().getDisplayMetrics();
            RelativeLayout.LayoutParams lp;
            if (mPortrait) {
                lp = (LayoutParams) mBottomMaskView.getLayoutParams();
                lp.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
                mBottomMaskView.setLayoutParams(lp);

                lp = (LayoutParams) mFolderContainer.getLayoutParams();
                lp.addRule(RelativeLayout.ABOVE, BOTTOMMASK_ID);
                lp.bottomMargin = (int) (-17 * dm.density);
                mFolderContainer.setLayoutParams(lp);
                mFolderContainer.bringToFront();

                lp = (LayoutParams) mTopMaskView.getLayoutParams();
                lp.addRule(RelativeLayout.ALIGN_PARENT_TOP);
                lp.topMargin = -mFolderContainerHeight + (int) (12 * dm.density);
                mTopMaskView.setLayoutParams(lp);
            } else {
                lp = (LayoutParams) mFolderContainer.getLayoutParams();
                lp.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
                mFolderContainer.setLayoutParams(lp);
                mFolderContainer.bringToFront();

                lp = (LayoutParams) mTopMaskView.getLayoutParams();
                lp.addRule(RelativeLayout.ALIGN_PARENT_TOP);
                lp.topMargin = -mFolderContainerHeight;
                mTopMaskView.setLayoutParams(lp);
            }

            TranslateAnimation topTranslateAnimation = new TranslateAnimation(0, 0,
                    mFolderContainerHeight, 0);
            topTranslateAnimation.setInterpolator(new LinearInterpolator());
            topTranslateAnimation.setRepeatCount(0);
            topTranslateAnimation.setDuration(200);
            mTopMaskView.startAnimation(topTranslateAnimation);
            mTopMaskView.bringToFront();
        }
    }

    void initCell(final ArrayList<AppShortcutInfo> items) {

        final Handler handler = getHandler();
        if (handler == null) {
            return;
        }
        final int N = items.size();
        Resources res = getResources();
        

        CellLayoutConfig config = new CellLayoutConfig();
        config.mCellWidth = res.getDimensionPixelSize(R.dimen.workspace_cell_width);
        config.mCellHeight = res.getDimensionPixelSize(R.dimen.workspace_cell_height);
        final int nMaxColumn = res.getInteger(R.integer.config_cellLayoutColumnCount);
        //final int nRows = res.getInteger(R.integer.config_cellLayoutRowsCount);
        config.mLongAxisCells = N / nMaxColumn + ((N % nMaxColumn == 0) ? 0 : 1);
        config.mShortAxisCells = nMaxColumn;//4;
        config.mOrientationPortrait = true;

        // set folder container bg
        mFolderContainer.setBackgroundResource(FOLDER_BGS[config.mLongAxisCells - 1]);

        // set workspce layout params
        mFolderWorkspace
                .setLayoutParams(new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.MATCH_PARENT, config.mLongAxisCells
                                * config.mCellHeight));

        final CellLayout layout = new CellLayout(getContext(), config);
        // LinearLayout.LayoutParams layoutParams = new
        // LinearLayout.LayoutParams(
        // android.widget.LinearLayout.LayoutParams.MATCH_PARENT,
        // config.mLongAxisCells
        // * config.mCellHeight);
        mFolderWorkspace.removeAllViewsInLayout();
        mFolderWorkspace.addView(layout, 0);

        DisplayMetrics dm = res.getDisplayMetrics();
        final View folderLableSpace = findViewById(R.id.folder_lable_space);
        LinearLayout.LayoutParams folderLableSpaceLp = (android.widget.LinearLayout.LayoutParams) folderLableSpace
                .getLayoutParams();
        mFolderContainerHeight = folderLableSpaceLp.topMargin + (int) (40 * dm.density)
                + config.mLongAxisCells * config.mCellHeight;

        // mFolderContainerHeight = mFolderContainer.getMeasuredHeight();
        // set container contour
        // final View folderLableSpace = findViewById(R.id.folder_lable_space);
        // LinearLayout.LayoutParams folderLableSpaceLp =
        // (android.widget.LinearLayout.LayoutParams) folderLableSpace
        // .getLayoutParams();
        // mFolderContourBitmap = Bitmap.createBitmap(dm.widthPixels,
        // mFolderContainerHeight,
        // Config.ARGB_8888);
        // Canvas canvas = new Canvas(mFolderContourBitmap);
        // Path topPath = new Path();
        // Path bottomPath = new Path();
        // if (mWorkspceType == Workspace.WORKSPACE_WORKSPACE) {
        // com.android.iphonelauncher.CellLayout.LayoutParams lp =
        // (com.android.iphonelauncher.CellLayout.LayoutParams) mFolderIcon
        // .getLayoutParams();
        // final int x = lp.x;
        // final int w = lp.width;
        //
        // topPath.moveTo(0, CORNER_H);
        // topPath.lineTo(x + w / 2 - CORNER_W, CORNER_H);
        // topPath.lineTo(x + w / 2, 0);
        // topPath.lineTo(x + w / 2 + CORNER_W, CORNER_H);
        // topPath.lineTo(mFolderContourBitmap.getWidth(), CORNER_H);
        //
        // bottomPath.moveTo(0, mFolderContourBitmap.getHeight());
        // bottomPath.lineTo(mFolderContourBitmap.getWidth(),
        // mFolderContourBitmap.getHeight());
        //
        // folderLableSpaceLp.topMargin = CORNER_H * 2;
        //
        // } else if (mWorkspceType == Workspace.WORKSPACE_NAVIGATEBAR) {
        // com.android.iphonelauncher.CellLayout.LayoutParams lp =
        // (com.android.iphonelauncher.CellLayout.LayoutParams) mFolderIcon
        // .getLayoutParams();
        // final int x = lp.x;
        // final int w = lp.width;
        //
        // bottomPath.moveTo(0, mFolderContourBitmap.getHeight() - CORNER_H);
        // bottomPath.lineTo(x + w / 2 - CORNER_W,
        // mFolderContourBitmap.getHeight() - CORNER_H);
        // bottomPath.lineTo(x + w / 2, mFolderContourBitmap.getHeight());
        // bottomPath.lineTo(x + w / 2 + CORNER_W,
        // mFolderContourBitmap.getHeight() - CORNER_H);
        // bottomPath.lineTo(mFolderContourBitmap.getWidth(),
        // mFolderContourBitmap.getHeight()
        // - CORNER_H);
        //
        // bottomPath.moveTo(0, 0);
        // bottomPath.lineTo(mFolderContourBitmap.getWidth(), 0);
        //
        // folderLableSpaceLp.topMargin = CORNER_H;
        // }
        // canvas.drawPath(topPath, mLinePaint);
        // canvas.drawPath(bottomPath, mLinePaint);
        // mFolderContainer.setBackgroundDrawable(new
        // FastBitmapDrawable(mFolderContourBitmap));
        // folderLableSpace.setLayoutParams(folderLableSpaceLp);
        //

        handler.post(new Runnable() {
            public void run() {
                final CellLayout layout = (CellLayout) mFolderWorkspace.getChildAt(0);
                for (int i = 0; i < N; i++) {
                    int[] vacant = new int[2];
                    if (layout.getVacantCell(vacant, 1, 1)) {
                        View shortcut = mLauncher.createIphoneShortcut(items.get(i));
                        mFolderWorkspace.addInScreen(shortcut, 0, vacant[0], vacant[1], 1, 1);
                        AnimManager.getInstance().startSingle(shortcut);
                    }
                }
            }
        });
    }

    void closeSelf() {
        mLauncher.closeIphoneFolder();
    }

    void startDrag(View v) {
        if (!v.isInTouchMode()) {
            return;
        }
        AnimManager.getInstance().start();
        mFolderLable.setVisibility(View.INVISIBLE);
        mFolderEditContainer.setVisibility(View.VISIBLE);
        mFolderWorkspace.startDrag(((CellLayout) v.getParent()).getTag());// (v,
                                                                          // this,
                                                                          // app,
                                                                          // DragController.DRAG_ACTION_MOVE);
        ShortcutInfo app = (ShortcutInfo) v.getTag();
        // final ArrayList<ShortcutInfo> apps = ((UserFolderInfo)
        // mInfo).contents;
        // apps.remove(app);
        mDragItem = app;
    }

    boolean addItem(ShortcutInfo info) {
        resetDragItem();
        final CellLayout layout = (CellLayout) mFolderWorkspace.getChildAt(0);
        if(layout.getChildCount() < FolderIcon.MAX_ITEMS){
	        int[] vacant = new int[2];
	        if (layout.getVacantCell(vacant, 1, 1)) {
	            View shortcut = mLauncher.createIphoneShortcut(info);
	            mFolderWorkspace.addInScreen(shortcut, 0, vacant[0], vacant[1], 1, 1);
	            
	            LauncherModel.addOrMoveItemInDatabase(mLauncher, info,
	            		mInfo.container, 0, vacant[0], vacant[1], true);
	            
	            AnimManager.getInstance().startSingle(shortcut);
	            
	            return true;
	        }
        }
        
        return false;
    }

    void resetDragItem() {
        mDragItem = null;
    }

    // public AnimManager getAnimManager() {
    // return mAnimManager;
    // }

    private Bitmap makeTopMaskBitmap() {
        Bitmap bitmap = null;
        DisplayMetrics dm = getResources().getDisplayMetrics();

        int count = mLauncher.getWorkspace().getChildCount();
        int current = mLauncher.getWorkspace().getCurrentScreen();

        // get the wallpaper
        Drawable wallpaperDrawable = WallpaperManager.getInstance(getContext()).getDrawable();
        Bitmap wBitmap = ((BitmapDrawable) wallpaperDrawable).getBitmap();
        Rect frame = new Rect();
        mLauncher.getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);
        int statusBarHeight = frame.top;
        int offset = ((wallpaperDrawable.getIntrinsicWidth() - dm.widthPixels) / (count - 1))
                * current;
        
        final int nMaxColumn = getResources().getInteger(R.integer.config_cellLayoutColumnCount);

        if (mWorkspceType == Workspace.WORKSPACE_WORKSPACE) {
            CellLayout layout = (CellLayout) mFolderIcon.getParent();
            com.android.iphonelauncher.CellLayout.LayoutParams lp = (com.android.iphonelauncher.CellLayout.LayoutParams) mFolderIcon
                    .getLayoutParams();
            final int lines = lp.cellY + 1;
            bitmap = Bitmap.createBitmap(dm.widthPixels, lines
                    * (layout.getHeightGap() + lp.height), Config.ARGB_8888);
            Canvas canvas = new Canvas(bitmap);
            bitmap.setDensity(dm.densityDpi);
            final Drawable pointerDrawable = getResources().getDrawable(R.drawable.pointer);
            final int nPointerPadding = getResources().getDimensionPixelSize(R.dimen.folder_mask_point_padding);

            // draw this bitmap bg as wallpaper
            canvas.drawBitmap(wBitmap, new Rect(offset, statusBarHeight,
                    offset + bitmap.getWidth(), statusBarHeight + bitmap.getHeight()), new Rect(0,
                    0, bitmap.getWidth(), bitmap.getHeight()), null);
            
            for (int i = 0; i < lines * nMaxColumn; i++) {
                final View child = layout.findChildByCell(i % nMaxColumn, i / nMaxColumn);
                if (child == null) {
                    break;
                }
                lp = (com.android.iphonelauncher.CellLayout.LayoutParams) child.getLayoutParams();
                final int left = lp.x;
                final int top = lp.y;
                if (child == mFolderIcon) {
                    Drawable[] drawables = ((BubbleTextView) child).getCompoundDrawables();
                    final Drawable drawable = drawables[1];
                    if (drawable != null) {
                        final int w = drawable.getIntrinsicWidth();
                        final int h = drawable.getIntrinsicHeight();
                        final int hOffset = (lp.width - w) / 2;
                        final int vOffset = child.getPaddingTop();
                        canvas.translate(left + hOffset, top + vOffset);
                        drawable.setBounds(0, 0, w, h);
                        drawable.draw(canvas);
                        canvas.translate(-left - hOffset, -top - vOffset);
                        int hPointerOffset = (lp.width - pointerDrawable.getIntrinsicWidth()) / 2;
                        canvas.translate(left + hPointerOffset, top + vOffset + h + nPointerPadding);
                        pointerDrawable.setBounds(0, 0, pointerDrawable.getIntrinsicWidth(),
                                pointerDrawable.getIntrinsicHeight());
                        pointerDrawable.draw(canvas);
                        canvas.translate(-left - hPointerOffset, -top - vOffset - h - nPointerPadding);
                    }
                } else {
                    Bitmap cache = child.getDrawingCache();
                    canvas.drawBitmap(Common.makeGaryBitmap(cache, getContext()), left, top, null);
                }
            }
        } else if (mWorkspceType == Workspace.WORKSPACE_NAVIGATEBAR) {
            final Workspace workspace = mLauncher.getWorkspace();
            CellLayout cell = (CellLayout) workspace.getChildAt(workspace.getCurrentScreen());
            int width = cell.getWidth();
            int height = cell.getHeight();
            // int y = cell.getTopPadding();
            height -= cell.getBottomPadding();
            Bitmap iconsbitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
            iconsbitmap.setDensity(dm.densityDpi);
            final Canvas canvas = new Canvas(iconsbitmap);
            cell.dispatchDraw(canvas);
            iconsbitmap = Common.makeGaryBitmap(iconsbitmap, getContext());

            bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
            bitmap.setDensity(dm.densityDpi);
            final Canvas c = new Canvas(bitmap);
            c.drawBitmap(wBitmap, new Rect(offset, statusBarHeight, offset + bitmap.getWidth(),
                    statusBarHeight + bitmap.getHeight()),
                    new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight()), null);
            c.drawBitmap(iconsbitmap, 0, 0, null);
        }
        return bitmap;
    }

    private Bitmap makeBottomMaskBitmap() {
        Bitmap bitmap = null;
        DisplayMetrics dm = getResources().getDisplayMetrics();

        int count = mLauncher.getWorkspace().getChildCount();
        int current = mLauncher.getWorkspace().getCurrentScreen();

        // get the wallpaper
        Drawable wallpaperDrawable = WallpaperManager.getInstance(getContext()).getDrawable();
        Bitmap wBitmap = ((BitmapDrawable) wallpaperDrawable).getBitmap();
        Rect frame = new Rect();
        mLauncher.getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);
        int statusBarHeight = frame.top;
        int leftOffset = ((wallpaperDrawable.getIntrinsicWidth() - dm.widthPixels) / (count - 1))
                * current;
        int bottombarHeight = getResources().getDimensionPixelSize(
                R.dimen.iphone_navigatebar_height);
        
        final int nMaxColumn = getResources().getInteger(R.integer.config_cellLayoutColumnCount);

        if (mWorkspceType == Workspace.WORKSPACE_WORKSPACE) {
            CellLayout layout = (CellLayout) mFolderIcon.getParent();
            com.android.iphonelauncher.CellLayout.LayoutParams lp = (com.android.iphonelauncher.CellLayout.LayoutParams) mFolderIcon
                    .getLayoutParams();

            final int childCount = layout.getChildCount();
            final int xCount = layout.getCountX();
            final int lines = lp.cellY + 1;
            final int childHeight = lp.height;
            // int restLines = childCount / xCount + (childCount % xCount == 0 ?
            // 0 : 1) - lines;
            int restLines = layout.getCountY() - (lp.cellY + 1);
            if (restLines <= 0) {
                restLines = 1;
            }
            bitmap = Bitmap.createBitmap(dm.widthPixels,
                    restLines * (lp.height + layout.getHeightGap()) + bottombarHeight,
                    Config.ARGB_8888);
            Canvas canvas = new Canvas(bitmap);
            bitmap.setDensity(dm.densityDpi);

            // draw the bg
            final int topOffset = statusBarHeight + lp.y + lp.height;
            canvas.drawBitmap(wBitmap,
                    new Rect(leftOffset, topOffset, leftOffset + bitmap.getWidth(), topOffset
                            + bitmap.getHeight()),
                    new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight()), null);

            for (int i = (lp.cellY + 1) * xCount; i < childCount; i++) {
                final View child = layout.findChildByCell(i % nMaxColumn, i / nMaxColumn);
                if (child == null) {
                    break;
                }
                lp = (com.android.iphonelauncher.CellLayout.LayoutParams) child.getLayoutParams();
                final int x = lp.x;
                final int y = lp.y - lines * (childHeight + layout.getHeightGap());
                Bitmap cache = child.getDrawingCache();
                canvas.drawBitmap(Common.makeGaryBitmap(cache, getContext()), x, y, null);
            }
        } else if (mWorkspceType == Workspace.WORKSPACE_NAVIGATEBAR) {
            if (!mPortrait) {
                return null;
            }

            CellLayout layout = (CellLayout) mFolderIcon.getParent();
            com.android.iphonelauncher.CellLayout.LayoutParams lp = (com.android.iphonelauncher.CellLayout.LayoutParams) mFolderIcon
                    .getLayoutParams();
            final int lines = lp.cellY + 1;
            bitmap = Bitmap.createBitmap(dm.widthPixels,
                    lines * (layout.getCellHeight() + layout.getHeightGap()), Config.ARGB_8888);
            Canvas canvas = new Canvas(bitmap);
            bitmap.setDensity(dm.densityDpi);
            // draw the bg
            final int topOffset = dm.heightPixels
                    - getResources().getDimensionPixelSize(R.dimen.iphone_navigatebar_height);
            canvas.drawBitmap(wBitmap,
                    new Rect(leftOffset, topOffset, leftOffset + bitmap.getWidth(), topOffset
                            + bitmap.getHeight()),
                    new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight()), null);

            for (int i = 0; i < lines * nMaxColumn; i++) {
                final View child = layout.findChildByCell(i % nMaxColumn, i / nMaxColumn);
                if (child == null) {
                    break;
                }
                lp = (com.android.iphonelauncher.CellLayout.LayoutParams) child.getLayoutParams();
                final int left = lp.x;
                final int top = lp.y;
                if (child == mFolderIcon) {
                    Drawable[] drawables = ((BubbleTextView) child).getCompoundDrawables();
                    final Drawable drawable = drawables[1];
                    if (drawable != null) {
                        final int w = drawable.getIntrinsicWidth();
                        final int h = drawable.getIntrinsicHeight();
                        final int hOffset = (lp.width - w) / 2;
                        final int vOffset = child.getPaddingTop();
                        canvas.translate(left + hOffset, top + vOffset);
                        drawable.setBounds(0, 0, w, h);
                        drawable.draw(canvas);
                        canvas.translate(-left - hOffset, -top - vOffset);

                        Drawable pointerDrawable = getResources().getDrawable(R.drawable.pointer);
                        final int pointerW = pointerDrawable.getIntrinsicWidth();
                        final int pointerH = pointerDrawable.getIntrinsicHeight();
                        int hPointerOffset = (lp.width - pointerW) / 2;
                        canvas.translate(left + hPointerOffset, top - pointerH / 2);
                        canvas.rotate(180, pointerW / 2, pointerH / 2);
                        pointerDrawable.setBounds(0, 0, pointerW, pointerH);
                        pointerDrawable.draw(canvas);
                        canvas.rotate(-180, pointerW / 2, pointerH / 2);
                        canvas.translate(-left - hPointerOffset, -top + pointerH / 2);
                    }
                } else {
                    Bitmap cache = child.getDrawingCache();
                    canvas.drawBitmap(Common.makeGaryBitmap(cache, getContext()), left, top, null);
                }
            }
        }
        return bitmap;
    }

    private void initMask() {
    	if(mTopMaskBitmap == null)
    		mTopMaskBitmap = makeTopMaskBitmap();
    	
        if (mTopMaskBitmap != null) {
            mTopMaskHeight = mTopMaskBitmap.getHeight();
        }
        
        if(mTopMaskView == null){
        	mTopMaskView = new ImageView(getContext());
            mTopMaskView.setBackgroundDrawable(new FastBitmapDrawable(mTopMaskBitmap));
            mTopMaskView.setId(TOPMASK_ID);
            mTopMaskView.setOnClickListener(this);
            addView(mTopMaskView);
        } else {
        	mTopMaskView.setBackgroundDrawable(new FastBitmapDrawable(mTopMaskBitmap));
        }

        if(mBottomMaskBitmap == null)
        	mBottomMaskBitmap = makeBottomMaskBitmap();
        
        if (mBottomMaskBitmap != null) {
            mBottomMaskHeight = mBottomMaskBitmap.getHeight();
        }
        
        if(mBottomMaskView == null){
	        mBottomMaskView = new ImageView(getContext());
	        mBottomMaskView.setBackgroundDrawable(new FastBitmapDrawable(mBottomMaskBitmap));
	        mBottomMaskView.setId(BOTTOMMASK_ID);
	        mBottomMaskView.setOnClickListener(this);
	        addView(mBottomMaskView);
        } else {
        	mBottomMaskView.setBackgroundDrawable(new FastBitmapDrawable(mBottomMaskBitmap));
        }
    }

    private void animationClose() {

        if (mWorkspceType == Workspace.WORKSPACE_WORKSPACE) {
            // animation topmask
            LayoutParams lp = (LayoutParams) mTopMaskView.getLayoutParams();
            TranslateAnimation topAnimation = new TranslateAnimation(0, 0, 0, -lp.topMargin);
            topAnimation.setFillEnabled(true);
            topAnimation.setFillAfter(true);
            topAnimation.setInterpolator(new LinearInterpolator());
            topAnimation.setRepeatCount(0);
            topAnimation.setDuration(200);
            mTopMaskView.startAnimation(topAnimation);

            TranslateAnimation bottomAnimation = new TranslateAnimation(0, 0, 0,
                    -mFolderContainerHeight + lp.topMargin);
            bottomAnimation.setFillEnabled(true);
            bottomAnimation.setFillAfter(true);
            bottomAnimation.setInterpolator(new LinearInterpolator());
            bottomAnimation.setRepeatCount(0);
            bottomAnimation.setDuration(200);
            mBottomMaskView.startAnimation(bottomAnimation);

        } else if (mWorkspceType == Workspace.WORKSPACE_NAVIGATEBAR) {
            // animation top mask view
            TranslateAnimation topAnimation = new TranslateAnimation(0, 0, 0,
                    mFolderContainerHeight);
            topAnimation.setFillEnabled(true);
            topAnimation.setFillAfter(true);
            topAnimation.setInterpolator(new LinearInterpolator());
            topAnimation.setRepeatCount(0);
            topAnimation.setDuration(200);
            mTopMaskView.startAnimation(topAnimation);
        }

        Handler handler = getHandler();
        if (handler != null) {
            getHandler().postDelayed(new Runnable() {
                public void run() {
                    mLauncher.closeIphoneFolder();
                }
            }, 300);
        } else {
            mLauncher.closeIphoneFolder();
        }
        // AlphaAnimation alphaAnimation = new AlphaAnimation(1.0f, 0.0f);
        // alphaAnimation.setFillEnabled(true);
        // alphaAnimation.setFillAfter(true);
        // alphaAnimation.setInterpolator(new LinearInterpolator());
        // alphaAnimation.setDuration(500);
        // alphaAnimation.setRepeatCount(0);
        // alphaAnimation.setAnimationListener(new AnimationListener() {
        // public void onAnimationStart(Animation animation) {
        // }
        //
        // public void onAnimationRepeat(Animation animation) {
        //
        // }
        //
        // public void onAnimationEnd(Animation animation) {
        // mLauncher.closeIphoneFolder();
        // }
        // });
        // mFolderContainer.startAnimation(alphaAnimation);
    }

    private void recycle() {
         if (mTopMaskBitmap != null) {
	         mTopMaskBitmap.recycle();
	         mTopMaskBitmap = null;
         }
        
         if (mBottomMaskBitmap != null) {
	         mBottomMaskBitmap.recycle();
	         mBottomMaskBitmap = null;
         }
        //
        // if (mFolderContourBitmap != null) {
        // mFolderContourBitmap.recycle();
        // mFolderContourBitmap = null;
        // }

        System.gc();
    }

    public void afterTextChanged(Editable s) {
        boolean empty = s.length() == 0;
        if (empty) {
            mCloseView.setVisibility(View.GONE);
        } else {
            mCloseView.setVisibility(View.VISIBLE);
        }
    }

    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
    }

    public void onTextChanged(CharSequence s, int start, int before, int count) {

    }
}
